<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Образец кэширования данных результирующего набора</title><meta name="Language" content="ru-RU" /><meta name="System.Keywords" content="образец кэширования результирующего набора" /><meta name="Microsoft.Help.Id" content="13a95ebb-996c-4713-a1bd-5834fe22a334" /><meta name="Description" content="Этот образец приложения, использующего драйвер Драйвер Microsoft JDBC для SQL Server, демонстрирует способы извлечения больших объемов данных из базы данных и управления количеством строк данных, кэшируемых на клиенте с помощью метода setFetchSize объекта " /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Образец кэширования данных результирующего набора</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Этот образец приложения, использующего драйвер Драйвер Microsoft JDBC для SQL Server, демонстрирует способы извлечения больших объемов данных из базы данных и управления количеством строк данных, кэшируемых на клиенте с помощью метода <a href="233bf4f8-4758-42d0-a80b-33e34fa78027.htm">setFetchSize</a> объекта <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a>.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Ограничение количества строк, кэшируемых на клиенте, отличается от ограничения общего количества строк, которое может содержаться в результирующем наборе. Для управления общим количеством строк, которое может содержаться в результирующем наборе, следует использовать метод <a href="cccc0667-589b-4655-8ea8-14ae8b2eb9dc.htm">setMaxRows</a> объекта <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a>, наследуемый объектами <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> и <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a>.</p></div><p>Чтобы ограничить количество строк, кэшируемых на клиенте, необходимо сначала использовать курсор на стороне сервера при создании одного из объектов <b>Statement</b>, специально указав тип курсора, который необходимо использовать при создании объекта <b>Statement</b>. Например, драйвер JDBC обеспечивает тип курсора TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, который является быстрым однопроходным курсором только для чтения на стороне сервера для использования при работе с базой данных SQL Server.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Альтернативой использованию определенного типа курсора SQL Server является использование свойства строки соединения selectMethod при задании для него значения "cursor". Дополнительные сведения о типах курсоров, поддерживаемых драйвером JDBC см. в разделе <span sdata="link"><a href="4f4d3db7-4f76-450d-ab63-141237a4f034.htm">Основные сведения о типах курсоров</a></span>.</p></div><p>После выполнения запроса, содержащегося в объекте <b>Statement</b>, и возврате данных клиенту в виде результирующего набора, можно вызвать метод  <b>setFetchSize</b> для управления объемом данных, извлекаемых единовременно из базы данных. Например, если имеется таблица, в которой содержится 100 строк данных, и значение размера выборки равно 10, то на клиенте в определенный момент времени будет кэшироваться только 10 строк. Хотя при этом будет уменьшена скорость обработки данных, преимуществом является использование меньшего объема памяти на клиенте, что особенно ценно при необходимости обработки больших объемов данных.</p><p>Файл кода для этого образца имеет имя cacheRS.java и находится в следующей папке:</p><p>&lt;<i>каталог установки</i>&gt;\sqljdbc_&lt;<i>версия</i>&gt;\&lt;<i>язык</i>&gt;\help\samples\resultsets</p></div><h1 class="heading">Требования</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>Чтобы запустить образец приложения, необходимо в пути к классу указать файл sqljdbc.jar или файл sqljdbc4.jar. Если в пути к классу не указан файл sqljdbc.jar или sqljdbc4.jar, то образец приложения вызовет распространенное исключение «Класс не найден». Также потребуется доступ к образцу базы данных SQL Server 2005 AdventureWorks. Дополнительные сведения о задании пути к классу см. в разделе <span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">Использование драйвера JDBC</a></span>.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Драйвер Драйвер Microsoft JDBC для SQL Server содержит файлы библиотек классов sqljdbc.jar и sqljdbc4.jar, которые используются в зависимости от применяемых параметров среды выполнения Java (JRE). Дополнительные сведения о том, какие файлы JAR следует выбрать, см. в разделе <span sdata="link"><a href="447792bb-f39b-49b4-9fd0-1ef4154c74ab.htm">Системные требования для драйверов JDBC</a></span>.</p></div></div><h1 class="heading">Пример</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>В следующем примере образец кода будет использоваться для соединения с образцом базы данных AdventureWorks. Затем используется инструкция SQL с объектом <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a>, указывается тип курсора на стороне сервера и выполняется инструкция SQL, а возвращенные ею данные помещаются в объект <b>SQLServerResultSet</b>.</p><p>Затем образец кода вызывает специальный метод <b>timerTest</b>, передавая в качестве аргументов размер выборки для использования и результирующий набор. Затем метод <b>timerTest</b> задает размер выборки результирующего набора с помощью метода <b>setFetchSize</b>, задает время начала проверки и затем просматривает результирующий набор в цикле <span class="code">While</span>. После завершения цикла <span class="code">While</span> код задает время завершения проверки и отображает результат проверки, включая размер выборки, количество обработанных строк и время выполнения проверки.</p><div class="sampleCode"><span codeLanguage="other"><pre>import java.sql.*;
import com.microsoft.sqlserver.jdbc.SQLServerResultSet;

public class cacheRS {

   public static void main(String[] args) {

      // Create a variable for the connection string.
      String connectionUrl = "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;

      try {

         // Establish the connection.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);

         // Create and execute an SQL statement that returns a large
         // set of data and then display it.
         String SQL = "SELECT * FROM Sales.SalesOrderDetail;";
         stmt = con.createStatement(SQLServerResultSet.TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, +
               SQLServerResultSet.CONCUR_READ_ONLY);

         // Perform a fetch for every row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1, rs);
         rs.close();

         // Perform a fetch for every tenth row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(10, rs);
         rs.close();

         // Perform a fetch for every 100th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(100, rs);
         rs.close();

         // Perform a fetch for every 1000th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1000, rs);
         rs.close();

         // Perform a fetch for every 128th row (the default) in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(0, rs);
         rs.close();
      }

      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }

      finally {
         if (rs != null) try { rs.close(); } catch(Exception e) {}
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }

   private static void timerTest(int fetchSize, ResultSet rs) {
      try {

         // Declare the variables for tracking the row count and elapsed time.
         int rowCount = 0;
         long startTime = 0;
         long stopTime = 0;
         long runTime = 0;

         // Set the fetch size then iterate through the result set to
         // cache the data locally.
         rs.setFetchSize(fetchSize);
         startTime = System.currentTimeMillis();
         while (rs.next()) {
            rowCount++;
         }
         stopTime = System.currentTimeMillis();
         runTime = stopTime - startTime;

         // Display the results of the timer test.
         System.out.println("FETCH SIZE: " + rs.getFetchSize());
         System.out.println("ROWS PROCESSED: " + rowCount);
         System.out.println("TIME TO EXECUTE: " + runTime);
         System.out.println();

      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}</pre></span></div></div><span id="seeAlsoSpan"><h1 class="heading">См. также</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="4fc4b1c6-3075-4ad7-9244-865d9ede7ae6.htm">Работа с результирующими наборами</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Отправить <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dСпасибо%20за%20отзыв!%20Отзывы%20помогают%20команде%20разработчиков%20в%20улучшении%20документации.%20Просматривая%20ваши%20отзывы,%20корпорация%20Майкрософт%20может%20спросить%20по%20электронной%20почте%20ваше%20мнение,%20касающееся%20определенного%20решения.%20Адрес%20электронной%20почты%20не%20используется%20в%20других%20целях%20и%20удаляется%20корпорацией%20Майкрософт%20после%20завершения%20просмотра.%0\AДополнительные%20сведения%20о%20политике%20конфиденциальности%20корпорации%20Майкрософт%20см.%20на%20странице%20http://privacy.microsoft.com/ru-ru/default.aspx.%0\A%0\d','Отзывы%20пользователей.');">отзыв</a> об этом разделе в Майкрософт.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© © Корпорация Майкрософт (Microsoft Corporation), 2012 г. Все права защищены.</a></p></span></div></div></body></html>