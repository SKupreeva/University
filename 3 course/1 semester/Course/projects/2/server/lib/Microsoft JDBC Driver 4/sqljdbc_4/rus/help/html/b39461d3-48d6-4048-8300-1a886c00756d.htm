<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Использование расширенных типов данных</title><meta name="Language" content="ru-RU" /><meta name="System.Keywords" content="расширенные типы данных" /><meta name="Microsoft.Help.Id" content="b39461d3-48d6-4048-8300-1a886c00756d" /><meta name="Description" content="В Драйвер Microsoft JDBC для SQL Server расширенные типы данных JDBC служат для преобразования типов данных SQL Server в форматы, распознаваемые языком программирования Java." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Использование расширенных типов данных</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>В Драйвер Microsoft JDBC для SQL Server расширенные типы данных JDBC служат для преобразования типов данных SQL Server в форматы, распознаваемые языком программирования Java. </p></div><h1 class="heading">Примечания</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>В следующей таблице перечислены все стандартные сопоставления между расширенными типами данных SQL Server, типами данных JDBC, и типами данных языка программирования Java.</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>Типы SQL Server</p></th><th><p>Типы JDBC (java.sql.Types)</p></th><th><p>Типы языка Java</p></th></tr><tr><td><p>varbinary(max)</p><p>image</p></td><td><p>LONGVARBINARY</p></td><td><p>byte[] (по умолчанию), Blob, InputStream, String</p></td></tr><tr><td><p>text</p><p>varchar(max)</p></td><td><p>LONGVARCHAR</p></td><td><p>String (по умолчанию), Clob, InputStream</p></td></tr><tr><td><p>ntext</p><p>nvarchar(max)</p></td><td><p>LONGVARCHAR</p><p>LONGNVARCHAR (Java SE 6.0)</p></td><td><p>String (по умолчанию), Clob, NClob (Java SE 6.0)</p></td></tr><tr><td><p>xml</p></td><td><p>LONGVARCHAR</p><p>SQLXML (Java SE 6.0)</p></td><td><p>String (по умолчанию), InputStream, Clob, byte[],Blob, SQLXML (Java SE 6.0)</p></td></tr><tr><td><p>определяемый пользователем тип</p></td><td><p>VARBINARY</p></td><td><p>String (по умолчанию), byte[], InputStream</p></td></tr></table></div><p>В следующих разделах приведены примеры использования драйвера JDBC и расширенных типов данных.</p></div><h1 class="heading">Типы данных BLOB, CLOB и NCLOB</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>Драйвер JDBC реализует все методы интерфейсов java.sql.Blob, java.sql.Clob и java.sql.NClob. </p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Значения CLOB могут использоваться с типами данных больших значений SQL Server 2005 и более поздних версий. В частности, типы CLOB могут использоваться с типами данных <span sdata="langKeyword" value="varchar(max)"><span class="keyword">varchar(max)</span></span> и <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span>, типы BLOB могут использоваться с типами данных <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> и <span sdata="langKeyword" value="image"><span class="keyword">image</span></span>, а типы NCLOB могут использоваться с <span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> и <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span>.</p></div></div><h1 class="heading">Типы данных большого объема</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>В ранних версиях SQL Server работа с типами данных большого объема требовала особого подхода. Типами данных большого объема называются типы, у которых превышен максимальный размер строки в 8 КБ. В SQL Server введен указатель максимального размера для типов данных <span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span>, <span sdata="langKeyword" value="nvarchar"><span class="keyword">nvarchar</span></span> и <span sdata="langKeyword" value="varbinary"><span class="keyword">varbinary</span></span> позволяющий хранить значения размером до 2^31 байт. Столбцы таблицы и переменные Transact-SQL могут указывать типы данных <span sdata="langKeyword" value="varchar(max)"><span class="keyword">varchar(max)</span></span>, <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span> или  <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span>.</p><p>В большинстве случаев работа с типами данных большого объема предполагает их извлечение из базы данных или добавление в базу данных. В следующих разделах описываются различные способы выполнения этих задач.</p><h1 class="heading">Извлечение типов данных большого объема из базы данных</h1><div class="subsection"><p>Извлечь тип недвоичных данных большого объема, например, типа данных <span sdata="langKeyword" value="varchar(max)"><span class="keyword">varchar(max)</span></span> из базы данных можно путем считывания данных в виде потока символов. В следующем примере для извлечения данных из базы данных и их возвращения в виде результирующего набора используется метод <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a> класса <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a>. Затем для считывания данных большого объема из результирующего набора используется метод<a href="c70e210f-0288-47cc-9268-a29c45979729.htm">getCharacterStream</a> класса <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a>.</p><div class="sampleCode"><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT TOP 1 * FROM Test1");
rs.next();
Reader reader = rs.getCharacterStream(2);</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Аналогичный способ можно использовать для типов данных <span sdata="langKeyword" value="text"><span class="keyword">text</span></span>, <span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> и <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span>.</p></div><p>Извлечь тип двоичных данных большого объема, например, типа данных <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> из базы данных можно несколькими способами. Эффективнее всего считать данные в виде двоичного потока следующим образом:</p><div class="sampleCode"><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT photo FROM mypics");
rs.next();
InputStream is = rs.getBinaryStream(2);</pre></span></div><p>Кроме того, для считывания данных в виде байтового массива можно следующим образом использовать метод <a href="d16a0aea-6144-4fcb-bcbc-5d7daa36d327.htm">getBytes</a>:</p><div class="sampleCode"><span codeLanguage="other"><pre>ResultSet rs = stmt.executeQuery("SELECT photo FROM mypics");
rs.next();
byte [] b = rs.getBytes(2);</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Также можно считать данные в виде BLOB. Однако это менее эффективно, чем два предыдущих способа.</p></div></div><h1 class="heading">Добавление типов данных большого объема в базу данных.</h1><div class="subsection"><p>Драйвер JDBC хорошо справляется с загрузкой больших объемов данных при наличии достаточного объема памяти. В противном случае рекомендуется использовать потоковую передачу. Тем не менее, эффективнее всего загружать большие объемы данных с помощью потоковых интерфейсов.</p><p>Также можно использовать передачу в виде строки или байтов следующим образом:</p><div class="sampleCode"><span codeLanguage="other"><pre>PreparedStatement pstmt = con.prepareStatement("INSERT INTO test1 (c1_id, c2_vcmax) VALUES (?, ?)");
pstmt.setInt(1, 1);
pstmt.setString(2, htmlStr);
pstmt.executeUpdate();</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Такой способ применим и для величин, хранимых в столбцах <span sdata="langKeyword" value="text"><span class="keyword">text</span></span>, <span sdata="langKeyword" value="ntext"><span class="keyword">ntext</span></span> и <span sdata="langKeyword" value="nvarchar(max)"><span class="keyword">nvarchar(max)</span></span>.</p></div><p>При наличии на сервере библиотеки изображений и при необходимости загрузить целые двоичные файлы изображений в столбец <span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span> эффективнее всего использовать драйвер JDBC, организуя потоки напрямую следующим образом:</p><div class="sampleCode"><span codeLanguage="other"><pre>PreparedStatement pstmt = con.prepareStatement("INSERT INTO test1 (Col1, Col2) VALUES(?,?)");
File inputFile = new File("CLOBFile20mb.jpg");
FileInputStream inStream = new FileInputStream(inputFile);
int id = 1;
pstmt.setInt(1,id);
pstmt.setBinaryStream(2, inStream);
pstmt.executeUpdate();
inStream.close();</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Методы CLOB и BLOB для загрузки больших объемов данных неэффективны.</p></div></div><h1 class="heading">Изменение типов данных большого объема в базе данных.</h1><div class="subsection"><p>В большинстве случаев для обновления или изменения больших значений в базе данных рекомендуется передавать параметра через классы <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> и <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> с помощью таких команд Transact-SQL, как UPDATE, WRITE и SUBSTRING.</p><p>Если нужно заменить экземпляр слова в крупном текстовом файле, например в архивном HTML-файле, можно воспользоваться объектом <b>Clob</b> следующим образом:</p><div class="sampleCode"><span codeLanguage="other"><pre>String SQL = "SELECT * FROM test1;";
Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
ResultSet rs = stmt.executeQuery(SQL);
rs.next();

Clob clob = rs.getClob(2);
long pos = clob.position("dog", 1);
clob.setString(pos, "cat");
rs.updateClob(2, clob);
rs.updateRow();</pre></span></div><p>Кроме того, можно выполнить все операции на сервере и просто передать параметры в подготовленную инструкцию UPDATE.</p><p>Дополнительные сведения о типах данных большого объема ищите в разделе «Использование типов данных большого объема» электронной документации по Microsoft SQL Server.</p></div></div><h1 class="heading">Тип данных XML</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>SQL Server содержит тип данных <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span>, который позволяет хранить XML-документы и фрагменты в базе данных SQL Server. Тип данных <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> — это встроенный в SQL Server тип данных, в чем-то напоминающий другие встроенные типы данных, такие как <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> и <span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span>. Аналогично другим встроенным типам, типы данных <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> можно использовать следующим образом: как тип переменной, тип параметра, тип возвращаемой функции или тип столбца при создании таблицы, а также в функциях CAST и CONVERT Transact-SQL.</p><p>В драйвере JDBC тип данных <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> может быть сопоставлен со строкой, байтовым массивом, потоком или объектом CLOB, BLOB или SQLXML. По умолчанию задана строка. Для драйвера JDBC, начиная с версии 2.0, обеспечивается поддержка API-интерфейса JDBC 4.0, что позволяет использовать интерфейс SQLXML. Интерфейс SQLXML определяет методы для обмена данными XML и их обработки. Тип данных <span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span> сопоставляется с типом данных SQL Server <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span>. Дополнительные сведения о считывании XML-данных из реляционной базы данных и записи их в нее с типом данных Java <span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span> можно найти по адресу <span sdata="link"><a href="32b7217e-1f0c-473d-9a45-176daa81584e.htm">Поддержка XML-данных</a></span>.</p><p>Благодаря реализации типа данных <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> в драйвере JDBC обеспечена поддержка следующих возможностей:</p><ul><li><p>Доступ к XML как к стандартным строкам Java UTF-16 для большинства общепринятых методик программирования.</p></li><li><p>Ввод UTF-8 и других XML-данных с 8-битным кодированием.</p></li><li><p>Доступ к XML как к байтовому массиву с ведущей меткой следования байтов (BOM) при кодировании в UTF-16 для взаимообмена с другими средствами обработками XML и файлами на диске.</p></li></ul><p>SQL Server требует для XML в кодировке UTF-16 ведущую метку следования байтов (BOM). Приложение должно обеспечивать эти функции, если значения параметра XML предоставлено в виде байтовых массивов. SQL Server всегда выводит значения XML значения в виде строк в кодировке UTF-16 без метки следования байтов или со встроенным объявлением кодировки. Если значения XML извлекаются в формате byte[], BinaryStream или Blob, то для значения ожидается метка следования байтов UTF-16.</p><p>Дополнительные сведения о типе данных <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> можно найти в разделе «Тип данных XML» электронной документации по SQL Server.</p></div><h1 class="heading">Пользовательский тип данных</h1><div id="sectionSection4" class="section" name="collapseableSection" style=""><p>Введение определяемых пользователем типов (UDT) в SQL Server 2005 совершенствует систему типов SQL, позволяя пользователю сохранять объекты и настраиваемые структуры данных в базе данных SQL Server. Определяемые пользователем типы могут содержать несколько типов данных, и их поведение может отличаться от традиционных псевдонимов типов данных, которые состоят из одного системного типа данных SQL Server. Определяемые пользователем типы данных определяются с помощью любого из языков, которые поддерживаются средой Microsoft .NET CLR и формируют проверяемый код. Это языки Microsoft Visual C# и Visual Basic .NET. Данные предоставляются в виде полей и свойств класса или структуры на базе платформы .NET Framework, а особенности работы определяются методами класса или структуры. </p><p>В SQL Server пользовательские типы данных можно использовать в качестве идентификатора столбцов таблицы, как переменную в пакете Transact-SQL или как аргумент функции Transact-SQL или хранимой процедуры.</p><p>Дополнительные сведения о применении пользовательских типов данных см. в разделе «Использование и изменение экземпляров пользовательских типов» в электронной документации по SQL Server.</p></div><span id="seeAlsoSpan"><h1 class="heading">См. также</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">Основные сведения о типах данных драйвера JDBC</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Отправить <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dСпасибо%20за%20отзыв!%20Отзывы%20помогают%20команде%20разработчиков%20в%20улучшении%20документации.%20Просматривая%20ваши%20отзывы,%20корпорация%20Майкрософт%20может%20спросить%20по%20электронной%20почте%20ваше%20мнение,%20касающееся%20определенного%20решения.%20Адрес%20электронной%20почты%20не%20используется%20в%20других%20целях%20и%20удаляется%20корпорацией%20Майкрософт%20после%20завершения%20просмотра.%0\AДополнительные%20сведения%20о%20политике%20конфиденциальности%20корпорации%20Майкрософт%20см.%20на%20странице%20http://privacy.microsoft.com/ru-ru/default.aspx.%0\A%0\d','Отзывы%20пользователей.');">отзыв</a> об этом разделе в Майкрософт.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© © Корпорация Майкрософт (Microsoft Corporation), 2012 г. Все права защищены.</a></p></span></div></div></body></html>