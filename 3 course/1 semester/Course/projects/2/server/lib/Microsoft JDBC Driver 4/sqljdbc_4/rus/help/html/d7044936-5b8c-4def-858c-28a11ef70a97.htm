<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Использование базовых типов данных</title><meta name="Language" content="ru-RU" /><meta name="System.Keywords" content="основные типы данных" /><meta name="Microsoft.Help.Id" content="d7044936-5b8c-4def-858c-28a11ef70a97" /><meta name="Description" content="Драйвер Драйвер Microsoft JDBC для SQL Server использует расширенные типы данных JDBC для преобразования типов данных SQL Server в формат, распознаваемый языком программирования Java, и наоборот. Драйвер JDBC обеспечивает поддержку API JDBC 4." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Использование базовых типов данных</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Драйвер Драйвер Microsoft JDBC для SQL Server использует расширенные типы данных JDBC для преобразования типов данных SQL Server в формат, распознаваемый языком программирования Java, и наоборот. Драйвер JDBC обеспечивает поддержку API JDBC 4.0, которая включает тип данных <span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span>, а также такие национальные (Юникод) типы данных, как <span sdata="langKeyword" value="NCHAR"><span class="keyword">NCHAR</span></span>, <span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span>, <span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span> и <span sdata="langKeyword" value="NCLOB"><span class="keyword">NCLOB</span></span>.</p></div><h1 class="heading">Сопоставление типов данных</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>В следующей таблице перечислены все сопоставления по умолчанию между базовыми типами данных SQL Server, типами данных JDBC, и типами данных языка программирования Java.</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>Типы SQL Server</p></th><th><p>Типы JDBC (java.sql.Types)</p></th><th><p>Типы языка Java</p></th></tr><tr><td><p>bigint</p></td><td><p>BIGINT</p></td><td><p>long</p></td></tr><tr><td><p>binary</p></td><td><p>BINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>bit</p></td><td><p>BIT</p></td><td><p>boolean</p></td></tr><tr><td><p>char</p></td><td><p>CHAR</p></td><td><p>String</p></td></tr><tr><td><p>date</p></td><td><p>DATE</p></td><td><p>java.sql.Date</p></td></tr><tr><td><p>datetime</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>datetime2</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>datetimeoffset (2)</p></td><td><p>microsoft.sql.Types.DATETIMEOFFSET</p></td><td><p>microsoft.sql.DateTimeOffset</p></td></tr><tr><td><p>decimal</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>float</p></td><td><p>DOUBLE</p></td><td><p>double</p></td></tr><tr><td><p>image</p></td><td><p>LONGVARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>int</p></td><td><p>INTEGER</p></td><td><p>int</p></td></tr><tr><td><p>money</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>nchar</p></td><td><p>CHAR</p><p>NCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>ntext</p></td><td><p>LONGVARCHAR</p><p>LONGNVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>numeric</p></td><td><p>NUMERIC</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>nvarchar</p></td><td><p>VARCHAR</p><p>NVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>nvarchar(max)</p></td><td><p>VARCHAR</p><p>NVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>real</p></td><td><p>REAL</p></td><td><p>float</p></td></tr><tr><td><p>smalldatetime</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>smallint</p></td><td><p>SMALLINT</p></td><td><p>short</p></td></tr><tr><td><p>smallmoney</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>text</p></td><td><p>LONGVARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>time</p></td><td><p>TIME (1)</p></td><td><p>java.sql.Time (1)</p></td></tr><tr><td><p>timestamp</p></td><td><p>BINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>tinyint</p></td><td><p>TINYINT</p></td><td><p>short</p></td></tr><tr><td><p>определяемый пользователем тип</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>uniqueidentifier</p></td><td><p>CHAR</p></td><td><p>String</p></td></tr><tr><td><p>varbinary</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>varbinary(max)</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p /></td><td><p /></td><td><p /></td></tr><tr><td><p>varchar</p></td><td><p>VARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>varchar(max)</p></td><td><p>VARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>xml</p></td><td><p>LONGVARCHAR</p><p>LONGNVARCHAR (Java SE 6.0)</p></td><td><p>String</p><p>SQLXML</p></td></tr></table></div><p>(1) Чтобы использовать java.sql.Time с типом времени SQL Server, необходимо задать для свойства соединения <span sdata="langKeyword" value="sendTimeAsDatetime"><span class="keyword">sendTimeAsDatetime</span></span> значение False.</p><p>(1) Значения <span sdata="langKeyword" value="datetimeoffset"><span class="keyword">datetimeoffset</span></span> доступны программным образом с помощью класса <span sdata="link"><a href="20bbeacd-ccca-4a46-8184-ff941ae2ec5f.htm">Класс DateTimeOffset</a></span>.</p><p>Тип данных sqlvariant SQL Server в настоящее время драйвером JDBC не поддерживается. Если использовался запрос на извлечение данных из таблицы, содержащей столбец типа данных sqlvariant, то возникнет исключение.</p><p>В следующих разделах приводятся примеры использования драйвера JDBC и базовых типов данных. Более подробный пример использования базовых типов данных в приложении Java см. в разделе <span sdata="link"><a href="59ac80cf-fc66-4493-933d-38e479c5f54d.htm">Образец базовых типов данных</a></span>.</p></div><h1 class="heading">Извлечение данных в виде строки</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>Если нужно извлечь данные из источника, сопоставленного с любыми базовыми типами данных JDBC, и просмотреть их в виде строки, или если данные со строгим контролем типов не требуются, то можно воспользоваться методом <a href="f81dde01-d328-4b32-8871-1efac645b68e.htm">getString</a> класса <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a>:</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>String SQL = "SELECT TOP 10 * FROM Person.Contact";
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery(SQL);

while (rs.next()) {
   System.out.println(rs.getString(4) + " " + rs.getString(6));
}
rs.close();
stmt.close();

</pre></span></div></div></div><h1 class="heading">Извлечение данных по типу данных</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>Если нужно извлечь из источника данных данные известного типа, следует воспользоваться одним из методов <b>get&lt;Type&gt;</b> класса <b>SQLServerResultSet</b>, также известных как <span class="term">методы получения</span>. С методами <b>get&lt;Type&gt;</b> можно использовать или имя столбца, или его индекс:</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getShort("job_id");
rs.close();
stmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Методы <b>getUnicodeStream</b> и <b>getBigDecimal</b> с масштабом считаются устаревшими и драйвером JDBC не поддерживаются.</p></div></div><h1 class="heading">Обновление данных по типу данных</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>Если нужно обновить значение поля в источнике данных, следует воспользоваться одним из методов <b>update&lt;Type&gt;</b> класса <b>SQLServerResultSet</b>. В следующем примере для обновления данных в источнике используется метод <a href="2bb0319e-12cb-4604-a7e3-b22a24b02296.htm">updateInt</a> совместно с методом <a href="cfced0ca-a281-40dc-8d2f-370d5f0bf12b.htm">updateRow</a>:</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); 
ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getInt(2);
empJobID++;
rs.first();
rs.updateInt(2, empJobID);
rs.updateRow();
rs.close();
stmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Драйвер JDBC не может обновить столбец SQL Server, если имя столбца длиннее, чем 127 символов. При попытке обновить столбец, имя которого длиннее 127 символов, возникнет исключение.</p></div></div><h1 class="heading">Обновление по параметризированному запросу</h1><div id="sectionSection4" class="section" name="collapseableSection" style=""><p>Если нужно обновить данные в источнике с помощью параметризированного запроса, можно задать тип данных для параметра одним из методов <b>set&lt;Type&gt;</b> класса <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a>, также известных как <span class="term">методы задания</span>. В следующем примере используется метод <a href="bd4e4085-f704-4a73-b6a7-7d443d564728.htm">prepareStatement</a> для предварительной компиляции параметризированного запроса, затем метод <a href="25dabdc9-c60f-485a-87eb-306067964765.htm">setString</a> — для задания величины строки параметра, после чего вызывается метод <a href="ca534c6b-ef4d-4ae8-8cc3-514728623cff.htm">executeUpdate</a>.</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>PreparedStatement pstmt = con.prepareStatement("UPDATE employee SET
   fname = ? WHERE (lname = 'Brown')");
String first = "Bob";
pstmt.setString(1, first);
int rowCount = pstmt.executeUpdate();
pstmt.close();

</pre></span></div></div><p>Дополнительные сведения о параметризованных запросах см. в разделе <span sdata="link"><a href="3202b88f-ce13-44dd-982c-c6a3b0260378.htm">Использование инструкции SQL с параметрами</a></span>.</p></div><h1 class="heading">Передача параметров хранимой процедуре</h1><div id="sectionSection5" class="section" name="collapseableSection" style=""><p>Если нужно передать введенные параметры хранимой процедуре, можно задать параметры по индексу или по имени с помощью методов <b>set&lt;Type&gt;</b> класса <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a>. В следующем примере для настройки вызова хранимой процедуры используется метод <a href="265b024c-898a-4bd0-98b5-f06076717b9e.htm">prepareCall</a>, затем с помощью метода <a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a> задается парамтр для вызова, после чего вызывается метод <a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a>. </p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid(?)}");
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
rs.close();
cstmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>В данном примере возвращается результирующий набор с результатами запуска хранимой процедуры. </p></div><p>Дополнительные сведения об использовании драйвера JDBC с хранимыми процедурами и входными параметрами см. в разделе <span sdata="link"><a href="8f491b70-7d1b-42bd-964f-9a8b86af5eaa.htm">Использование хранимых процедур с входными параметрами</a></span>.</p></div><h1 class="heading">Извлечение параметров из хранимой процедуры</h1><div id="sectionSection6" class="section" name="collapseableSection" style=""><p>Если нужно извлечь параметры обратно из хранимой процедуры, то нужно сначала зарегистрировать параметр OUT по имени или по индексу при помощи методов<a href="82f8d608-efc1-4af8-a985-ec25d19420aa.htm">registerOutParameter</a> класса <b>SQLServerCallableStatement</b> , а затем, после инициации вызова хранимой процедуры, назначить возвращаемый параметр OUT надлежащей переменной. В следующем примере для настройки вызова хранимой процедуры используется метод  <b>prepareCall</b>, метод <b>registerOutParameter</b> для настройки параметра OUT, затем метод <a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a> — для настройки параметра вызова, после чего вызывается метод <b>executeQuery</b>. Значение, возвращемое параметром OUT хранимой процедуры, извлекается с помощью метода <a href="9e3c51bc-7285-4f28-92c8-cfa05e49da9e.htm">getShort</a>.</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid (?, ?)}");
cstmt.registerOutParameter(2, java.sql.Types.SMALLINT);
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
short empJobID = cstmt.getShort(2);
rs.close();
cstmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>В дополнение к возвращаемому параметру OUT также можно вернуть результирующий набор с результатами запуска хранимой процедуры.</p></div><p>Дополнительные сведения об использовании драйвера JDBC с хранимыми процедурами и выходными параметрами см. в разделе <span sdata="link"><a href="1c006f27-7e99-43d5-974c-7b782659290c.htm">Использование хранимых процедур с выходными параметрами</a></span>.</p></div><span id="seeAlsoSpan"><h1 class="heading">См. также</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">Основные сведения о типах данных драйвера JDBC</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Отправить <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dСпасибо%20за%20отзыв!%20Отзывы%20помогают%20команде%20разработчиков%20в%20улучшении%20документации.%20Просматривая%20ваши%20отзывы,%20корпорация%20Майкрософт%20может%20спросить%20по%20электронной%20почте%20ваше%20мнение,%20касающееся%20определенного%20решения.%20Адрес%20электронной%20почты%20не%20используется%20в%20других%20целях%20и%20удаляется%20корпорацией%20Майкрософт%20после%20завершения%20просмотра.%0\AДополнительные%20сведения%20о%20политике%20конфиденциальности%20корпорации%20Майкрософт%20см.%20на%20странице%20http://privacy.microsoft.com/ru-ru/default.aspx.%0\A%0\d','Отзывы%20пользователей.');">отзыв</a> об этом разделе в Майкрософт.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© © Корпорация Майкрософт (Microsoft Corporation), 2012 г. Все права защищены.</a></p></span></div></div></body></html>